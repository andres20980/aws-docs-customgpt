#!/bin/bash

set -e

# Directorios de trabajo
BASE_PATH="$(pwd)"
REPOS_DIR="repos"  # Directorio donde se encuentran los subm√≥dulos
OUTPUT_DIR="fuentes"  # Directorio donde se generar√°n los archivos .md

# Limpiar cualquier directorio anterior
echo "üßπ Limpiando directorios previos..."
rm -rf "$REPOS_DIR" "$OUTPUT_DIR"

# Crear directorio de salida si no existe
mkdir -p "$OUTPUT_DIR"
echo "‚úÖ Directorio de salida '$OUTPUT_DIR' creado."

# Inicializar los subm√≥dulos, si no est√°n ya presentes, los a√±ade
echo "üîÑ Actualizando subm√≥dulos..."
git submodule update --init --recursive

# Recorremos los subm√≥dulos (repositorios) uno por uno
for REPO_DIR in "$REPOS_DIR"/*; do
  if [ -d "$REPO_DIR" ]; then
    REPO_NAME=$(basename "$REPO_DIR")  # Nombre del repositorio (subm√≥dulo)
    echo "üîÑ Procesando el subm√≥dulo: $REPO_NAME..."

    # Verificar si el subm√≥dulo est√° actualizado
    cd "$REPO_DIR"
    git fetch
    if git diff --quiet HEAD origin/main; then
      echo "üîë El subm√≥dulo '$REPO_NAME' ya est√° actualizado, omitiendo actualizaci√≥n."
    else
      echo "‚öôÔ∏è El subm√≥dulo '$REPO_NAME' no est√° actualizado, actualizando..."
      git pull origin main
    fi

    # Crear archivo de salida para cada repositorio
    OUTPUT_FILE="$OUTPUT_DIR/$REPO_NAME.md"
    echo "üìÑ Generando archivo unificado para $REPO_NAME..."

    # Inicializamos el archivo de salida
    > "$OUTPUT_FILE"
    echo "  ‚úÖ Archivo de salida vac√≠o creado: $OUTPUT_FILE"

    # Buscar todos los archivos dentro del subm√≥dulo, incluyendo texto, markdown, json, etc.
    find "$REPO_DIR" -type f | while read -r FILE; do
      if file "$FILE" | grep -q 'text'; then
        echo "    üîç Procesando archivo: $FILE"
        cat "$FILE" >> "$OUTPUT_FILE"
        echo -e "\n\n" >> "$OUTPUT_FILE"  # A√±adir separaci√≥n entre archivos de texto
      else
        echo "    ‚ö†Ô∏è Saltando archivo no textual: $FILE"
      fi
    done

    echo "‚úÖ Archivo generado: $OUTPUT_FILE"

    # Subir el archivo generado a tu repositorio con autenticaci√≥n
    echo "üîÑ A√±adiendo el archivo .md generado a git..."
    git add "$OUTPUT_FILE"
    git commit -m "A√±adir archivo .md generado para $REPO_NAME"
    GIT_REPO_URL="https://x-access-token:${GH_TOKEN}@github.com/$GITHUB_REPOSITORY.git"
    git push "$GIT_REPO_URL" main || { echo "‚ö†Ô∏è Error al hacer push para $REPO_NAME"; exit 1; }

    echo "‚úÖ Archivo .md subido para $REPO_NAME"
  else
    echo "‚ö†Ô∏è No se encontr√≥ el directorio del subm√≥dulo: $REPO_DIR"
  fi
done

echo "‚úÖ Proceso de unificaci√≥n y subida de archivos .md completado."
