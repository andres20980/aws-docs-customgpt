#!/bin/bash

set -e

# Directorio de trabajo
BASE_PATH="$(pwd)"
REPOS_DIR="repos"  # Directorio donde se encuentran los subm√≥dulos
OUTPUT_DIR="fuentes"  # Directorio donde se generar√°n los archivos .md

# Crear el directorio de salida si no existe
mkdir -p "$OUTPUT_DIR"

# Recorremos cada subm√≥dulo uno por uno
for REPO_DIR in "$REPOS_DIR"/*; do
  if [ -d "$REPO_DIR" ]; then
    REPO_NAME=$(basename "$REPO_DIR")  # Nombre del repositorio (subm√≥dulo)
    
    echo "üîÑ Procesando el subm√≥dulo: $REPO_NAME..."

    # Sincronizar el subm√≥dulo
    git submodule update --remote "$REPO_NAME"

    # Creamos un archivo de salida para cada repositorio
    OUTPUT_FILE="$OUTPUT_DIR/$REPO_NAME.md"
    echo "üìÑ Generando archivo unificado para $REPO_NAME..."

    # Inicializamos el archivo de salida
    > "$OUTPUT_FILE"

    # Buscamos y unificamos todos los archivos de texto dentro del subm√≥dulo
    find "$REPO_DIR" -type f \( -iname "*.md" -o -iname "*.txt" \) | while read -r FILE; do
      echo "  üîç Procesando archivo: $FILE"
      cat "$FILE" >> "$OUTPUT_FILE"
      echo -e "\n\n" >> "$OUTPUT_FILE"  # A√±adir separaci√≥n entre archivos
    done

    echo "‚úÖ Archivo generado: $OUTPUT_FILE"

    # Subir el archivo generado a tu repositorio
    git add "$OUTPUT_FILE"
    git commit -m "A√±adir archivo .md generado para $REPO_NAME"
    git push

    echo "‚úÖ Archivo .md subido para $REPO_NAME"
  else
    echo "‚ö†Ô∏è No se encontr√≥ el directorio del subm√≥dulo: $REPO_DIR"
  fi
done

echo "‚úÖ Proceso de unificaci√≥n y subida de archivos .md completado."