#!/bin/bash

set -e

# Directorios de trabajo
BASE_PATH="$(pwd)"
REPOS_DIR="repos"  # Directorio donde se encuentran los subm√≥dulos
OUTPUT_DIR="fuentes"  # Directorio donde se generar√°n los archivos .md

# Limpiar directorios previos si existen
echo "üßπ Limpiando directorios previos..."
rm -rf "$REPOS_DIR"
rm -rf "$OUTPUT_DIR"
mkdir -p "$OUTPUT_DIR"
echo "‚úÖ Directorio '$OUTPUT_DIR' creado."

# Aseg√∫rate de que los subm√≥dulos est√©n correctamente inicializados
echo "üîÑ Actualizando subm√≥dulos..."
git submodule update --init --recursive

# Recorremos cada subm√≥dulo uno por uno
for REPO_DIR in "$REPOS_DIR"/*; do
  if [ -d "$REPO_DIR" ]; then
    REPO_NAME=$(basename "$REPO_DIR")  # Nombre del repositorio (subm√≥dulo)
    
    echo "üîÑ Comprobando si el subm√≥dulo '$REPO_NAME' est√° actualizado..."
    # Actualizar solo si el subm√≥dulo no est√° actualizado
    git -C "$REPO_DIR" pull || { echo "‚ö†Ô∏è Error al actualizar el subm√≥dulo: $REPO_NAME"; continue; }

    # Crear archivo de salida para cada repositorio
    OUTPUT_FILE="$OUTPUT_DIR/$REPO_NAME.md"
    echo "üìÑ Generando archivo unificado para '$REPO_NAME'..."

    # Inicializamos el archivo de salida
    > "$OUTPUT_FILE"
    echo "  ‚úÖ Archivo de salida vac√≠o creado: $OUTPUT_FILE"

    # Buscar todos los archivos dentro del subm√≥dulo, incluyendo texto, markdown, json, etc.
    find "$REPO_DIR" -type f | while read -r FILE; do
      if file "$FILE" | grep -q 'text'; then
        echo "    üîç Procesando archivo: $FILE"
        cat "$FILE" >> "$OUTPUT_FILE"
        echo -e "\n\n" >> "$OUTPUT_FILE"  # A√±adir separaci√≥n entre archivos de texto
      else
        echo "    ‚ö†Ô∏è Saltando archivo no textual: $FILE"
      fi
    done

    echo "‚úÖ Archivo generado: $OUTPUT_FILE"

    # Buscar enlaces a http://docs.aws.amazon.com/ y generar archivos adicionales
    echo "üîç Buscando enlaces a http://docs.aws.amazon.com/..."
    grep -o 'http://docs.aws.amazon.com/[^"]*' "$OUTPUT_FILE" | while read -r LINK; do
      # Crear archivo adicional para cada enlace encontrado
      LINK_FILE="$OUTPUT_DIR/$(echo "$LINK" | sed 's/[^a-zA-Z0-9]/_/g').md"
      echo "üìÑ Generando archivo para el enlace '$LINK'..."
      echo "# Enlace: $LINK" > "$LINK_FILE"
      echo "üîó Enlace encontrado en $REPO_NAME" >> "$LINK_FILE"
      # Aqu√≠ podr√≠as agregar c√≥digo para obtener el contenido del enlace, si es necesario
    done

    # Subir los archivos generados para cada subm√≥dulo
    echo "üîÑ A√±adiendo el archivo .md generado a git..."
    git add "$OUTPUT_FILE"
    git commit -m "A√±adir archivo .md generado para $REPO_NAME"
    git push "https://x-access-token:${GH_TOKEN}@github.com/$GITHUB_REPOSITORY.git" main || { echo "‚ö†Ô∏è Error al hacer push para $REPO_NAME"; exit 1; }

    echo "‚úÖ Archivo .md subido para $REPO_NAME"
  else
    echo "‚ö†Ô∏è No se encontr√≥ el directorio del subm√≥dulo: $REPO_DIR"
  fi
done

# Procesar enlaces adicionales encontrados en los repositorios y crear md para cada uno
echo "‚úÖ Proceso de unificaci√≥n y subida de archivos .md completado."
